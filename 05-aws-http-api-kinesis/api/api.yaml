Transform: AWS::Serverless-2016-10-31
Description: AWS SAM HttpApi with Cognito Authorizer

Parameters:
  AppName:
    Type: String
    Description: Application Name
  ExpensesUserPool:
    Type: String
    Description: Expenses User Pool
  ExpensesUserPoolClient:
    Type: String
    Description: Expenses User Pool Client
  ExpensesPythonLayer:
    Type: String
    Description: Expenses Python Layer
  ExpensesTableName:
    Type: String
    Description: Expenses Table Name
  EmployeesTableName:
    Type: String
    Description: Employees Table Name
  OnExpenseApprovedStreamArn:
    Type: String
  OnExpenseApprovedStreamName:
    Type: String
  OnExpenseRejectedStreamArn:
    Type: String
  OnExpenseRejectedStreamName:
    Type: String
  OnExpenseSubmittedStreamArn:
    Type: String
  OnExpenseSubmittedStreamName:
    Type: String

Globals:
  Function:
    Timeout: 300
    Architectures:
      - x86_64
    Layers:
      - !Ref ExpensesPythonLayer
    Environment:
      Variables:
        VERSION: 0
        EXPENSES_TABLE_NAME: !Ref ExpensesTableName
        EMPLOYEES_TABLE_NAME: !Ref EmployeesTableName
        REGION: !Sub ${AWS::Region}
        # User Pool
        USER_POOL_ID: !Ref ExpensesUserPool
        # Streams.
        EXPENSE_SUBMITTED_STREAM: !Ref OnExpenseSubmittedStreamArn
        EXPENSE_APPROVED_STREAM: !Ref OnExpenseApprovedStreamArn
        EXPENSE_REJECTED_STREAM: !Ref OnExpenseRejectedStreamArn

Resources:
  ExpensesApiPythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ApiPythonLayer
      Description: Python dependencies for the API
      ContentUri: ./layers/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Retain

  ExpensesHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: api
      FailOnWarnings: true
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'
      Auth:
        Authorizers:
          MyOAuthAuthorizer:
            IdentitySource: $request.header.Authorization
            AuthorizationScopes:
              - email
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${ExpensesUserPool}
              audience:
                - !Ref ExpensesUserPoolClient
              authType: JWT
        DefaultAuthorizer: MyOAuthAuthorizer

  ExpensesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api_expenses.handler
      Runtime: python3.9
      CodeUri: .
      Layers:
        - !Ref ExpensesApiPythonLayer
      Events:
        ExpensesGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /expense
            Method: get
        ExpensesGetById:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /expense/{id}
            Method: get
        ExpensesPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /expense
            Method: post
        ExpensesApprovePost:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /expense/{id}/approve
            Method: post
        ExpensesRejectPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /expense/{id}/reject
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource:
                - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${ExpensesUserPool}
        - DynamoDBCrudPolicy:
            TableName: !Sub ${ExpensesTableName}
        - KinesisCrudPolicy:
            StreamName: !Sub ${OnExpenseSubmittedStreamName}
        - KinesisCrudPolicy:
            StreamName: !Sub ${OnExpenseApprovedStreamName}
        - KinesisCrudPolicy:
            StreamName: !Sub ${OnExpenseRejectedStreamName}

  EmployeesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: api_employees.handler
      Runtime: python3.9
      CodeUri: .
      Layers:
        - !Ref ExpensesApiPythonLayer
      Events:
        EmployeeGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /employee
            Method: get
        EmployeeGetByRole:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /employee/byRole/{roleName}
            Method: get
        EmployeeGetById:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /employee/{id}
            Method: get
        EmployeePost:
          Type: HttpApi
          Properties:
            ApiId: !Ref ExpensesHttpApi
            Path: /employee
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${EmployeesTableName}