Transform: AWS::Serverless-2016-10-31
Description: AWS SAM HttpApi with Function Authorizer

Globals:
  Function:
    Timeout: 300
    Architectures:
      - x86_64

Resources:

  HttpApiGwLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub "/aws/http-api/${AWS::StackName}"

  HttpApiGw:
    DependsOn:
      - HttpApiGwLogGroup
      - MyTokenAuthFunction
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt HttpApiGwLogGroup.Arn
        Format: '$context.identity.sourceIp - $context.requestId $context.authorizer.error'
      Auth:       
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers:
          MyLambdaTokenAuthorizer:
            Identity:
              Headers:
                - 'X-API-Key'
            AuthorizerPayloadFormatVersion: '2.0'
            EnableSimpleResponses: true
            FunctionArn: !GetAtt MyTokenAuthFunction.Arn
            EnableFunctionDefaultPermissions: true
      StageName: api
      CorsConfiguration:
        AllowMethods:
          - GET
          - POST
          - PATCH
          - PUT
          - DELETE
        AllowOrigins:
          - '*'
        AllowHeaders:
          - '*'

  MyTokenAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.authorizer
      Runtime: python3.9
      CodeUri: .
      Environment:
        Variables:
          TOKEN: 'My-Super-Secret-Token'

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.handler
      Runtime: python3.9
      CodeUri: .
      Events:
        HelloWorld:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApiGw
            Path: /hello
            Method: get
            PayloadFormatVersion: '2.0'